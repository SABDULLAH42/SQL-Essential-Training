<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/USER/Documents/SQL/SQL_Essential Training/WSDA_Music.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="5253"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,5:mainTrack"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="280"/><column index="3" value="76"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Artist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="0"/></sort><column_widths><column index="1" value="76"/><column index="2" value="187"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Customer" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="4" mode="1"/></sort><column_widths><column index="1" value="111"/><column index="2" value="97"/><column index="3" value="105"/><column index="4" value="300"/><column index="5" value="300"/><column index="6" value="167"/><column index="7" value="55"/><column index="8" value="124"/><column index="9" value="106"/><column index="10" value="165"/><column index="11" value="157"/><column index="12" value="233"/><column index="13" value="131"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Employee" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="0"/></sort><column_widths><column index="1" value="112"/><column index="2" value="95"/><column index="3" value="97"/><column index="4" value="157"/><column index="5" value="98"/><column index="6" value="162"/><column index="7" value="162"/><column index="8" value="228"/><column index="9" value="85"/><column index="10" value="55"/><column index="11" value="78"/><column index="12" value="106"/><column index="13" value="148"/><column index="14" value="148"/><column index="15" value="214"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Genre" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="80"/><column index="2" value="144"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Invoice" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="3" mode="0"/></sort><column_widths><column index="1" value="93"/><column index="2" value="111"/><column index="3" value="193"/><column index="4" value="300"/><column index="5" value="167"/><column index="6" value="109"/><column index="7" value="132"/><column index="8" value="160"/><column index="9" value="66"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="InvoiceLine" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="129"/><column index="2" value="93"/><column index="3" value="75"/><column index="4" value="88"/><column index="5" value="84"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="MediaType" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="121"/><column index="2" value="212"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Playlist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="91"/><column index="2" value="199"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PlaylistTrack" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="91"/><column index="2" value="75"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Track" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="1"/></sort><column_widths><column index="1" value="75"/><column index="2" value="187"/><column index="3" value="84"/><column index="4" value="121"/><column index="5" value="80"/><column index="6" value="244"/><column index="7" value="115"/><column index="8" value="97"/><column index="9" value="88"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="V_AvgTotal" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="123"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="V_Tracks_InvoiceLine" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="93"/><column index="2" value="88"/><column index="3" value="84"/><column index="4" value="171"/><column index="5" value="262"/><column index="6" value="115"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Between Operator.sql">/*
How many invoices exist between 1.98 and 5.00?
*/

SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 total BETWEEN 1.98 AND 5.00
ORDER BY
 InvoiceDate
 
 

 



</sql><sql name="IN Opearator.sql">/*
How many invoices do we have that are exactly between $1.98 or $3.96
*/

SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 total in(1.98,3.96)
ORDER BY
 InvoiceDate</sql><sql name="Single_City.sql">--How many invoices were billed to Brussels

SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 BillingCity = 'Brussels'
ORDER BY
 InvoiceDate</sql><sql name="Multiple_City using IN.sql">--How many invoices were billed to Brussels, Orlando or Paris?

SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 BillingCity IN ('Brussels','Orlando', 'Paris')
ORDER BY
 InvoiceDate</sql><sql name="LIKE Operator.sql">--How many invoices were billed in cities start with B?

SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 BillingCity LIKE 'B%'
ORDER BY
 InvoiceDate</sql><sql name="SQL 8">--How many invoices were billed in cities that have a B anywhere in its name?

SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 BillingCity LIKE '%B%'
ORDER BY
 InvoiceDate</sql><sql name="Filter and analyze using Dates.sql">--How many invoices were billed on 2010-05-22 00:00:00?


SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 InvoiceDate = '2010-05-22 00:00:00'   -- alternate way: date(InvoiceDate)= '2010-05-22'
ORDER BY
 InvoiceDate</sql><sql name="More than one condition.sql">--Get all invoiced were billed after 2010-05-22 and have a total of less than $3.00


SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 date(InvoiceDate)&gt; '2010-05-22' and total &lt;3
ORDER BY
 InvoiceDate</sql><sql name="Logical Operator.sql">--Get all invoices whose billing city is start with P or start with D?


SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 BillingCity like 'P%' OR BillingCity like 'D%'
ORDER BY
 InvoiceDate</sql><sql name="Brackets and order.sql">--Get all cities that are greater than 1.98 and any Cities whose Name start with P or start with D?

SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 total&gt;1.98 and (BillingCity like 'P%' OR BillingCity like 'D%')
ORDER BY
 InvoiceDate</sql><sql name="IF THEN LOGIC with CASE_1.sql">/*
WSDA Music Sales Goal
They want as many customers as possible to spend between $7.00 and $15.00

Sales categories
Baseline Purchase -between $0.99 and $1.99
Low Purchase- between $2.00 and $6.99
Target Purchase- between $7.00 and $15.00
Top Performer- Above $15.00
*/

SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total,
 CASE
 WHEN total &lt;2.00 THEN 'Baseline Purchase'
 WHEN total BETWEEN 2.00 and 6.99 THEN 'Low Purchase'
 WHEN total BETWEEN 7.00 and 15.00 THEN 'Target Purchase'
 ELSE 'Top Performer'
 END as PurchaseType
FROM
 Invoice
ORDER BY
 BillingCity</sql><sql name="IF THEN LOGIC with CASE_2.sql">/*WSDA Music Sales Goal
They want as many customers as possible to spend between $7.00 and $15.00

Sales categories
Baseline Purchase -between $0.99 and $1.99
Low Purchase- between $2.00 and $6.99
Target Purchase- between $7.00 and $15.00
Top Performer- Above $15.00
*/

SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total,
 CASE
 WHEN total &lt;2.00 THEN 'Baseline Purchase'
 WHEN total BETWEEN 2.00 and 6.99 THEN 'Low Purchase'
 WHEN total BETWEEN 7.00 and 15.00 THEN 'Target Purchase'
 ELSE 'Top Performer'
 END as PurchaseType
FROM
 Invoice
WHERE
 PurchaseType = 'Top Performer'
ORDER BY
 BillingCity</sql><sql name="JOIN_INTRO.sql">

SELECT
 *
FROM
 Invoice
INNER JOIN
 Customer
ON
 Invoice.CustomerId = Customer.CustomerId
ORDER BY
 Customer.CustomerId</sql><sql name="JINS_2.sql">--Simplifying JOINs

SELECT
 c.LastName,
 c.FirstName,
 i.InvoiceId,
 i.CustomerId,
 i.InvoiceDate,
 i.total
FROM
 Invoice as i
INNER JOIN
 Customer as c
ON
 i.CustomerId = c.CustomerId
ORDER BY
 c.CustomerId</sql><sql name="JOIN_3.sql">/*
Joins on more than two tables what employee are responsible for the10 highest individual sales?
*/



SELECT
 e.FirstName,
 e.LastName,
 e.EmployeeId,
 c.FirstName,
 c.LastName,
 c.SupportRepId,
 i.CustomerId,
 i.total
FROM
 Invoice as i
INNER JOIN
 Customer as c
ON
 i.CustomerId = c.CustomerId
INNER JOIN
 Employee as e
ON
 c.SupportRepId = e.EmployeeId
ORDER BY
 i.total DESC
LIMIT 10</sql><sql name="Length_Substr.sql">

SELECT
 FirstName,
 LastName,
 Address,
 FirstName ||' '||LastName ||' '||Address ||','||PostalCode as [Mailing Address],
 length(PostalCode),
 substr(Postalcode, 1,5) as [5 Digit Postal Code]
 
 
 
FROM
 Customer
WHERE
 Country = 'USA'</sql><sql name="DATE_Func.sql">--Calculate the age of all Employee

SELECT
 FirstName,
 LastName,
 BirthDate,
 strftime('%Y-%m-%d',BirthDate) as [Birthdate No Timecode],
 strftime('%Y-%m-%d','now') - strftime('%Y-%m-%d',BirthDate) AS Age
 
FROM
 Employee</sql><sql name="AGGREGATE_NESTING FUNC.sql">--Aggregate and Nesting Function

SELECT
 SUM(total) as [Total Sales],
 round(avg(total),2) as [Average Sales],
 MAX (total) as [Maximum Sales],
 MIN (total) as [Minimum Sales],
 COUNT (*) as [Sales Count]
 
FROM
 Invoice</sql><sql name="GROUP_BY_01.sql">--Grouping in SQL What are the average invoice total by city?

SELECT
 BillingCity,
 round(Avg(Total),2)
FROM
 Invoice
GROUP BY
 BillingCity
ORDER BY
 BillingCity
</sql><sql name="GROUP_BY_WHERE">--Grouping in SQL What are the average Invpoice Total by city for only the cities that start with L?

SELECT
 BillingCity,
 round(Avg(Total),2)
FROM
 Invoice
WHERE
 BillingCity LIKE 'L%'
GROUP BY
 BillingCity
ORDER BY
 BillingCity</sql><sql name="GROUP_BY_HAVING.sql">--What are the average Invoice total grater than $5.00

SELECT
 BillingCity,
 round(Avg(Total),2)
FROM
 Invoice
GROUP BY
 BillingCity
HAVING
 avg(total)&gt;5
ORDER BY
 BillingCity</sql><sql name="GROUP_BY_USING_WHERE_AND_HAVING.sql">--What are the average Invoice total grater than $5.00 for cities staring with B?

SELECT
 BillingCity,
 round(Avg(Total),2)
FROM
 Invoice
WHERE
 BillingCity LIKE 'B%'
GROUP BY
 BillingCity
HAVING
 avg(total)&gt;5
ORDER BY
 BillingCity</sql><sql name="GROUP_BY_MANY_FIELDS.sql">--What are the average invoice totals by billing Country and city

SELECT
 BillingCountry,
 BillingCity,
 round(Avg(Total),2)
FROM
 Invoice
GROUP by
 BillingCountry,
 BillingCity
ORDER by
 BillingCountry</sql><sql name="SELECT_CLAUSE_SUBQUERY.sql">--Gather data all invoices that are less than this average

SELECT
 round(avg(total),2) as [Average total]
FROM
 Invoice
 
 
 
 SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
WHERE
 total &lt;
  (select avg(total) from Invoice)
ORDER BY
 total DESC
 
 </sql><sql name="AGGREGATED_SUBQUERIES.sql">


SELECT
 BillingCity,
 Avg (Total) as [City Average],
 (select avg (total) from Invoice) AS [Global Average]
 
FROM
 Invoice
GROUP BY
 BillingCity
ORDER BY
 BillingCity
 

 
 
 SELECT
 avg(total)
FROM
 Invoice</sql><sql name="NON_AGGREGATE_SUBQUERIES.sql">--Subqueries without Aggregate function



SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity
FROM
 Invoice
WHERE
 InvoiceDate &gt;
(SELECT
 InvoiceDate
FROM
 Invoice
WHERE
 InvoiceId = 251)</sql><sql name="IN_CLAUSE.sql">--Returning multiple values from a subquery


SELECT                                       --Outer query
 InvoiceDate,
 BillingAddress,
 BillingCity
FROM
 Invoice
WHERE 
 InvoiceDate IN
  (SELECT                                   --Inner query it only display the InvoiceDate
 InvoiceDate
FROM
 Invoice
WHERE
 InvoiceId IN (251, 252, 254))
 
 
  


SELECT
 InvoiceDate
FROM
 Invoice
WHERE
 InvoiceId IN (251, 252, 254)</sql><sql name="DISTINCT_ NOT_IN FUNC.sql">--Subqueries and DISTINCT Which tracks are not selling?


SELECT                                --Outer Query display the track which are not sell
 TrackID,
 Composer,
 Name
FROM
 Track
WHERE
 TrackId
NOT IN
(SELECT                             --Inner query it display the track which are sell
 DISTINCT
 TrackId
FROM
 InvoiceLine
ORDER BY
 TrackId)</sql><sql name="CREATE_VIEW.sql">



CREATE VIEW V_AvgTotal AS 
SELECT
 round(avg(total),2) as [AverageTotal]
FROM
 Invoice</sql><sql name="CREATE_VIEW_02.sql">


CREATE VIEW V_Tracks_InvoiceLine AS
SELECT
 il.InvoiceId,
 il.UnitPrice,
 il.Quantity,
 t.Name,
 t.Composer,
 t.Milliseconds
FROM
 InvoiceLine il
INNER JOIN
 Track t
ON
 il.TrackId = t.TrackId</sql><sql name="INSERT_ DELETE_DATA.sql">--Inserting data mean to add an additional data into the existing catalogue

INSERT INTO
 Artist (Name)
 VALUES ('Bob Marley')
 
 
--Updating Daata

UPDATE
Artist
SET Name = 'Damien Marley'
WHERE
 ArtistId = 276
 
 
--Deleting data

DELETE FROM
 Artist
WHERE
 ArtistId = 276


</sql><sql name="PROJECT_SOLUTION_01.sql">--01&gt; How amny transaction took place between the year 2011-2012?

SELECT
 COUNT(*)
FROM
 Invoice
WHERE
 InvoiceDate &gt;= '2011-01-01' AND InvoiceDate &lt;= '2012-12-31'
 
--How much money did WSDA Music make during the same period?

SELECT
 sum(total)
FROM
 Invoice
WHERE
 InvoiceDate &gt;= '2011-01-01' AND InvoiceDate &lt;= '2012-12-31'</sql><sql name="PROJECT_SOLUTION_02.sql">--Q1&gt;  Get a list of Customers who made purchase between 2011-2012?

SELECT
 c.FirstName,
 c.LastName,
 i.total
FROM
 Invoice i
INNER JOIN
 Customer c
ON i.CustomerId = c.CustomerId          --CustomerId is a common field in both the TABLE
WHERE
 InvoiceDate &gt;= '2011-01-01' AND InvoiceDate &lt;= '2012-12-31'
ORDER BY
 i.total DESC
 
--Q2&gt;Get a list of customers, sales reps, total transaction amounts for each customer between 2011-2012?

SELECT
 c.FirstName AS [Customer FN],
 c.LastName AS [Customer LN],
 e.FirstName AS [ Employee FN],
 e.LastName AS [Employee LN],
 i.total
FROM
 Invoice i
INNER JOIN
 Customer c
ON i.CustomerId = c.CustomerId
INNER JOIN
 Employee e
ON e.EmployeeId = c.SupportRepId
WHERE
 InvoiceDate &gt;= '2011-01-01' AND InvoiceDate &lt;= '2012-12-31'
ORDER BY
 i.total DESC
 

--Q3&gt; How many transaction are above the average transaction amount during the period between 2011-2012?

--Find average transaction amount betwween 2011-2012

SELECT
 round(avg(total),2) AS [Avg Transaction Amount]
FROM
 Invoice
WHERE
 InvoiceDate &gt;= '2011-01-01' AND InvoiceDate &lt;= '2012-12-31'
 
--Get the number of transaction above the average transaction amount

SELECT
 count(total) AS [Num of Transaction above Avg]
FROM
 Invoice
WHERE 
 total &gt;
  (SELECT                                          --Innerquery--
 round(avg(total),2) AS [Avg Transaction Amount]
  FROM
   Invoice
  WHERE
   InvoiceDate &gt;= '2011-01-01' AND InvoiceDate &lt;= '2012-12-31')
AND
 InvoiceDate &gt;= '2011-01-01' AND InvoiceDate &lt;= '2012-12-31'  --Outerquery--
 

--Q4&gt; What was the average transaction amount for each year that WSDA Music has been in business??

SELECT
 round(avg(total),2) AS [Avg Transaction Amount],
 strftime('%Y',InvoiceDate) AS [Year]
FROM
 Invoice
GROUP BY
 strftime('%Y',InvoiceDate)
 
 

 
 
 </sql><sql name="SQL 37">--Q1&gt; Get a list of employees who exceeded the average transaction amount from sales they generated during 2011-2012

SELECT
 e.FirstName,
 e.LastName,
 sum(i.total) AS [Total Sales]
FROM
 Invoice i
INNER JOIN
 Customer c
ON
 i.CustomerId = c.CustomerId
INNER JOIN
 Employee e
ON
 e.EmployeeId = c.SupportRepId
WHERE 
 InvoiceDate &gt;='2011-01-01' AND InvoiceDate &lt;= '2012-12-31'
AND
 i.total &gt; 11.66
GROUP BY
 e.FirstName,
 e.LastName
ORDER BY
 e.LastName
 
--Q2&gt; Create a commission payout column that displays each employee's commission based on 15% of the sales transaction amount

SELECT
 e.FirstName,
 e.LastName,
 sum(i.total) AS [Total Sales],
 round(sum(i.total)*.15,2) AS [Commission Payout]
FROM
 Invoice i
INNER JOIN
 Customer c
ON
 i.CustomerId = c.CustomerId
INNER JOIN
 Employee e
ON
 e.EmployeeId = c.SupportRepId
WHERE 
 InvoiceDate &gt;='2011-01-01' AND InvoiceDate &lt;= '2012-12-31'
GROUP BY
 e.FirstName,
 e.LastName
ORDER BY
 e.LastName
 
--Q3&gt; Which employee made the highest commission?
--Ans: Jane Peacock

--Q4&gt; List the customer that jane Peacock supported

SELECT
 c.FirstName AS [Customer FN],
 c.LastName AS [Customer LN],
 e.FirstName AS [Employee FN],
 e.LastName AS [Employee LN],
 sum(i.total) AS [Total Sales],
 round(sum(i.total)*.15,2) AS [Commission Payout]
FROM
 Invoice i
INNER JOIN
 Customer c
ON
 i.CustomerId = c.CustomerId
INNER JOIN
 Employee e
ON
 e.EmployeeId = c.SupportRepId
WHERE 
 InvoiceDate &gt;='2011-01-01' AND InvoiceDate &lt;= '2012-12-31'
AND
 e.LastName = 'Peacock'
GROUP BY
 c.FirstName,
 c.LastName,
 e.FirstName,
 e.LastName
ORDER BY [Total Sales] DESC

--Which customer made the highest purchase?
--John Doeein

--Take alook at this customer record , does it look suspicious?

SELECT *
 FROM 
 Customer c 
WHERE
 c.LastName = 'Doeein'
 


--
SELECT
 LastName
FROM
 Customer
WHERE 
 LastName LIKE 'G%'
 
 
 
SELECT
 BillingCity,
 InvoiceDate,
 BillingAddress
FROM
 Invoice
WHERE
 BillingCity LIKE 'Bru%'</sql><current_tab id="33"/></tab_sql></sqlb_project>
